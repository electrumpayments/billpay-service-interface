---
swagger: "2.0"
info:
  description: "The Electrum Bill Payments Service describes an interface for performing\
    \ bill payments\n                  transactions. These transactions require a\
    \ reference number which uniquely identifies the bill\n                  processor,\
    \ bill issuer, as well as the customer account, and is typically printed on a\
    \ customer\n                  invoice. The customer then makes use of this reference\
    \ number to make a payment towards the\n                  corresponding bill."
  version: "1.0.0"
  title: "Bill Payments Service Interface"
  contact:
    name: "Electrum Support"
    url: "http://io.electrum"
    email: "support@electrum.co.za"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "sandbox.electrum.io"
basePath: "/billpay/v1"
schemes:
- "https"
paths:
  /accountLookups:
    post:
      summary: "Request account info"
      description: "Requests the current status of the account identified by the supplied\
        \ account reference. Not all services support account lookups. In the case\
        \ where this function is not supported for the requested service, a 501 HTTP\
        \ status code may be returned"
      operationId: "requestAccountInfo"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "An account lookup request"
        required: true
        schema:
          $ref: "#/definitions/AccountLookupRequest"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/AccountLookupResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/ErrorDetail"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorDetail"
        501:
          description: "Not implemented - in the case where the service does not support\
            \ account lookups"
        503:
          description: "Service Unavailable"
          schema:
            $ref: "#/definitions/ErrorDetail"
        504:
          description: "Gateway Timeout"
          schema:
            $ref: "#/definitions/ErrorDetail"
      security:
      - httpBasic: []
  /payments:
    post:
      summary: "Initiate a bill payment transaction"
      description: "Request that a payment be made towards a customer account"
      operationId: "createPayment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "A payment request"
        required: true
        schema:
          $ref: "#/definitions/PaymentRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PaymentResponse"
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/PaymentResponse"
          headers:
            Location:
              type: "string"
              description: "The location of the created payments resource"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/ErrorDetail"
        500:
          description: "Internal Server Error - MUST REVERSE"
          schema:
            $ref: "#/definitions/ErrorDetail"
        503:
          description: "Service Unavailable"
          schema:
            $ref: "#/definitions/ErrorDetail"
        504:
          description: "Gateway Timeout - MUST REVERSE"
          schema:
            $ref: "#/definitions/ErrorDetail"
      security:
      - httpBasic: []
  /payments/refunds:
    post:
      summary: "Creates a refund of previously confirmed payment"
      description: "If a payment is completed and confirmed successfully, some services\
        \ support that customers may request a refund for a particular payment for\
        \ some time after the payment took place. Not all services support refunds.\
        \ In the case where this function is not supported for the requested service,\
        \ a 501 HTTP status code may be returned"
      operationId: "createRefund"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "A refund request"
        required: true
        schema:
          $ref: "#/definitions/RefundRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/RefundResponse"
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/RefundResponse"
          headers:
            Location:
              type: "string"
              description: "The location of the created refund resource"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/ErrorDetail"
        500:
          description: "Internal Server Error - MUST REVERSE"
          schema:
            $ref: "#/definitions/ErrorDetail"
        501:
          description: "Not implemented - in the case where the service does not support\
            \ refunds"
          schema:
            $ref: "#/definitions/ErrorDetail"
        503:
          description: "Service Unavailable"
          schema:
            $ref: "#/definitions/ErrorDetail"
        504:
          description: "Gateway Timeout - MUST REVERSE"
          schema:
            $ref: "#/definitions/ErrorDetail"
      security:
      - httpBasic: []
  /payments/refunds/reversals:
    post:
      summary: "Reverse a refund request that failed or timed out"
      description: "If a createRefund request fails with a 500 or 504 HTTP status\
        \ code, or no response was received within the timeout period, it must be\
        \ reversed to ensure the payment is not refelected on a customer's account.\
        \ reverseRefund must be repeated until a final HTTP status code is received\
        \ (not 500 or 504). reverseRefund may be called repeatedly on the same payment\
        \ resource without negative effect."
      operationId: "reverseRefund"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The RefundRequest originally sent in the createRefund request"
        required: true
        schema:
          $ref: "#/definitions/RefundRequest"
      responses:
        202:
          description: "Accepted"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/ErrorDetail"
        500:
          description: "Internal Server Error - MUST REVERSE"
          schema:
            $ref: "#/definitions/ErrorDetail"
        503:
          description: "Service Unavailable"
          schema:
            $ref: "#/definitions/ErrorDetail"
        504:
          description: "Gateway Timeout - MUST REVERSE"
          schema:
            $ref: "#/definitions/ErrorDetail"
      security:
      - httpBasic: []
  /payments/refunds/{refundId}/cancellations:
    post:
      summary: "Cancel an existing bill payment refund"
      description: "If a createRefund request previously succeeded with a 201 status\
        \ it must be confirmed or cancelled to complete the transaction. cancelRefund\
        \ can only suceeed if a refund was created but not confirmed. cancelRefund\
        \ must be repeated until a final HTTP status code is received (not 500 or\
        \ 504). If a status code of either 500 or 504 is received, or no response\
        \ is received, the request must be repeated. cancelRefund may be called repeatedly\
        \ on the same payment resource without negative effect."
      operationId: "cancelRefund"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "refundId"
        in: "path"
        description: "The id returned in the corresponding createRefund response"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "A cancellation"
        required: true
        schema:
          $ref: "#/definitions/Cancellation"
      responses:
        202:
          description: "Accepted"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/ErrorDetail"
        500:
          description: "Internal Server Error - MUST REPEAT"
          schema:
            $ref: "#/definitions/ErrorDetail"
        503:
          description: "Service Unavailable"
          schema:
            $ref: "#/definitions/ErrorDetail"
        504:
          description: "Gateway Timeout - MUST REPEAT"
          schema:
            $ref: "#/definitions/ErrorDetail"
      security:
      - httpBasic: []
  /payments/refunds/{refundId}/confirmations:
    post:
      summary: "Confirm an existing bill payment refund"
      description: "If a createRefund request previously succeeded with a 201 status\
        \ it must be confirmed or cancelled to complete the transaction. confirmRefund\
        \ can only suceeed if a refund was created but not cancelled. confirmRefund\
        \ must be repeated until a final HTTP status code is received (not 500 or\
        \ 504). If a status code of either 500 or 504 is received, or no response\
        \ is received, the request must be repeated. confirmRefund may be called repeatedly\
        \ on the same refund resource without negative effect."
      operationId: "confirmRefund"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "refundId"
        in: "path"
        description: "The id returned in the corresponding createRefund response"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "A refund confirmation"
        required: true
        schema:
          $ref: "#/definitions/RefundConfirmation"
      responses:
        202:
          description: "Accepted"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/ErrorDetail"
        500:
          description: "Internal Server Error - MUST REPEAT"
          schema:
            $ref: "#/definitions/ErrorDetail"
        503:
          description: "Service Unavailable"
          schema:
            $ref: "#/definitions/ErrorDetail"
        504:
          description: "Gateway Timeout - MUST REPEAT"
          schema:
            $ref: "#/definitions/ErrorDetail"
      security:
      - httpBasic: []
  /payments/reversals:
    post:
      summary: "Reverse a payment request that failed or timed out"
      description: "If a createPayment request fails with a 500 or 504 HTTP status\
        \ code, or no response was received within the timeout period, it must be\
        \ reversed to ensure the payment is not refelected on a customer's account.\
        \ reversePayment must be repeated until a final HTTP status code is received\
        \ (not 500 or 504). reversePayment may be called repeatedly on the same payment\
        \ resource without negative effect."
      operationId: "reversePayment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The PaymentRequest originally sent in the createPayment request"
        required: true
        schema:
          $ref: "#/definitions/PaymentRequest"
      responses:
        202:
          description: "Accepted"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/ErrorDetail"
        500:
          description: "Internal Server Error - MUST REVERSE"
          schema:
            $ref: "#/definitions/ErrorDetail"
        503:
          description: "Service Unavailable"
          schema:
            $ref: "#/definitions/ErrorDetail"
        504:
          description: "Gateway Timeout - MUST REVERSE"
          schema:
            $ref: "#/definitions/ErrorDetail"
      security:
      - httpBasic: []
  /payments/{paymentId}/cancellations:
    post:
      summary: "Cancel an existing bill payment"
      description: "If a createPayment request previously succeeded with a 201 status\
        \ it must be confirmed or cancelled to complete the transaction. cancelPayment\
        \ can only suceeed if a payment was created but not confirmed. cancelPayment\
        \ must be repeated until a final HTTP status code is received (not 500 or\
        \ 504). If a status code of either 500 or 504 is received, or no response\
        \ is received, the request must be repeated. cancelPayment may be called repeatedly\
        \ on the same payment resource without negative effect."
      operationId: "cancelPayment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "paymentId"
        in: "path"
        description: "The id returned in the corresponding createPayment response"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "A cancellation"
        required: true
        schema:
          $ref: "#/definitions/Cancellation"
      responses:
        202:
          description: "Accepted"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/ErrorDetail"
        500:
          description: "Internal Server Error - MUST REPEAT"
          schema:
            $ref: "#/definitions/ErrorDetail"
        503:
          description: "Service Unavailable"
          schema:
            $ref: "#/definitions/ErrorDetail"
        504:
          description: "Gateway Timeout - MUST REPEAT"
          schema:
            $ref: "#/definitions/ErrorDetail"
      security:
      - httpBasic: []
  /payments/{paymentId}/confirmations:
    post:
      summary: "Confirm an existing bill payment"
      description: "If a createPayment request previously succeeded with a 201 status\
        \ it must be confirmed or cancelled to complete the transaction. confirmPayment\
        \ can only suceeed if a payment was created but not cancelled. confirmPayment\
        \ must be repeated until a final HTTP status code is received (not 500 or\
        \ 504). If a status code of either 500 or 504 is received, or no response\
        \ is received, the request must be repeated. confirmPayment may be called\
        \ repeatedly on the same payment resource without negative effect."
      operationId: "confirmPayment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "paymentId"
        in: "path"
        description: "The id returned in the corresponding createPayment response"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "A payment confirmation"
        required: true
        schema:
          $ref: "#/definitions/PaymentConfirmation"
      responses:
        202:
          description: "Accepted"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/ErrorDetail"
        500:
          description: "Internal Server Error - MUST REPEAT"
          schema:
            $ref: "#/definitions/ErrorDetail"
        503:
          description: "Service Unavailable"
          schema:
            $ref: "#/definitions/ErrorDetail"
        504:
          description: "Gateway Timeout - MUST REPEAT"
          schema:
            $ref: "#/definitions/ErrorDetail"
      security:
      - httpBasic: []
securityDefinitions:
  httpBasic:
    description: "All requests require HTTP basic authentication, where user name\
      \ equals the value used in\n                    MessageId.institutionId and\
      \ password has been agreed with Electrum."
    type: "basic"
definitions:
  Account:
    type: "object"
    required:
    - "accountRef"
    properties:
      accountRef:
        type: "string"
        description: "A reference number identifying the bill payments processor,\
          \ bill issuer, and customer"
        minLength: 6
        maxLength: 40
      balance:
        $ref: "#/definitions/LedgerAmount"
      dueDate:
        type: "string"
        format: "date-time"
        description: "The effective date of the current billing period"
    description: "Represents the status of a customer account"
  AccountLookupRequest:
    type: "object"
    required:
    - "accountRef"
    - "messageId"
    properties:
      accountRef:
        type: "string"
        description: "A reference number identifying the bill payments processor,\
          \ bill issuer, and customer"
        minLength: 6
        maxLength: 40
      messageId:
        $ref: "#/definitions/MessageId"
      merchant:
        $ref: "#/definitions/Merchant"
    description: "The data required to request account info"
  AccountLookupResponse:
    type: "object"
    required:
    - "account"
    - "receiver"
    properties:
      account:
        $ref: "#/definitions/Account"
      customer:
        $ref: "#/definitions/Customer"
      processor:
        $ref: "#/definitions/Institution"
      receiver:
        $ref: "#/definitions/Institution"
      slipData:
        $ref: "#/definitions/SlipData"
    description: "The data resulting from an account lookup request"
  Cancellation:
    type: "object"
    required:
    - "messageId"
    properties:
      linkData:
        type: "object"
        description: "The unaltered linkData object as supplied in the createPayment\
          \ response. Required if the createPayment response contained linkData"
      messageId:
        $ref: "#/definitions/MessageId"
    description: "Represents the data required to cancel a previously created payment"
  Customer:
    type: "object"
    properties:
      firstName:
        type: "string"
        description: "The customer's first name(s)"
        minLength: 0
        maxLength: 40
      lastName:
        type: "string"
        description: "The customer's last name"
        minLength: 0
        maxLength: 40
      address:
        type: "string"
        description: "The customer's address"
        minLength: 0
        maxLength: 80
    description: "A bill payment customer"
  ErrorDetail:
    type: "object"
    required:
    - "responseMessage"
    properties:
      responseCode:
        type: "string"
        description: "The response code. Will always be present unless request to\
          \ upstream timed out"
      responseMessage:
        type: "string"
        description: "The response code description"
      detailMessage:
        type: "object"
        description: "A free form detailed description of a particular failure condition\
          \ may optionally be supplied"
    description: "Represents the outcome of a completed transaction"
  Institution:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      id:
        type: "string"
        description: "The institution's id"
        pattern: "[0-9]{1,11}"
      name:
        type: "string"
        description: "The institutions's name"
        minLength: 0
        maxLength: 40
    description: "Processing or receiving institution details"
  LedgerAmount:
    type: "object"
    required:
    - "amount"
    - "currency"
    properties:
      amount:
        type: "integer"
        format: "int64"
        description: "Amount in minor denomination, e.g. R799.95 is encoded as 79995"
      currency:
        type: "string"
        description: "Three digit currency number from ISO 4217, e.g. South African\
          \ Rand is encoded as 710"
        pattern: "[0-9]{0,12}"
      ledgerIndicator:
        type: "string"
        description: "Indicates whether this amount is a debit or a credit. Only required\
          \ when the amount can be either a debit or a credit"
        enum:
        - "DEBIT"
        - "CREDIT"
    description: "An amount object only containing value and currency, and optionally\
      \ an indicator of DEBIT/CREDIT"
  Merchant:
    type: "object"
    required:
    - "merchantId"
    - "merchantName"
    - "merchantType"
    properties:
      merchantType:
        type: "string"
        description: "The assigned four digit merchant category code"
        pattern: "[0-9]{4}"
      merchantId:
        type: "string"
        description: "The assigned merchant identifier. Also known as card acceptor\
          \ id"
        minLength: 15
        maxLength: 15
      merchantName:
        $ref: "#/definitions/MerchantName"
    description: "Merchant related data. Must be included if available"
  MerchantName:
    type: "object"
    required:
    - "city"
    - "country"
    - "name"
    - "region"
    properties:
      name:
        type: "string"
        description: "The merchant or trading as name associated with the merchant"
        minLength: 0
        maxLength: 23
      city:
        type: "string"
        description: "The city where the merchant is located"
        minLength: 0
        maxLength: 13
      region:
        type: "string"
        description: "The state or region where the merchant is located"
        minLength: 0
        maxLength: 2
      country:
        type: "string"
        description: "The country where the merchant is located"
        minLength: 0
        maxLength: 2
    description: "A container object representing the Cardholder Name and Location"
  MessageId:
    type: "object"
    required:
    - "counter"
    - "institutionId"
    - "senderId"
    - "time"
    properties:
      counter:
        type: "string"
        description: "An incrementing counter. Each seperate request must be issued\
          \ a new counter value. If the counter reaches 999999, it must wrap back\
          \ to 000000. Upon application startup, the starting value for the counter\
          \ should be randomly assigned rather than always starting from 000000. For\
          \ transactions initiated by a physical card entry or point-of-sale device,\
          \ this value is typically referred to as a System Trace Audit Number (STAN)\
          \ and there will be one counter per device. For transactions not initiated\
          \ by a physical device, each message should have a distinct counter value.\
          \ Typically this is achieved by assigning each entity sending transactions\
          \ a unique osenderId. Alternatively, effort must be taken by the client\
          \ to synchronize senders so that a unique senderId, time, and counter combination\
          \ is guaranteed. It is not necessary for messages to be delivered in the\
          \ same order as in which counter values where assigned"
        pattern: "[0-9]{6}"
      institutionId:
        type: "string"
        description: "The id of the instituation originating the request, as issued\
          \ by Electrum"
        pattern: "[0-9]{1,11}"
      senderId:
        type: "string"
        description: "The id that uniquely identifies each device or system in a sender\
          \ institution capabile of sending requests. For transactions initiated from\
          \ physical card entry or point-of-sale devices, this is the terminal id"
        pattern: "[a-zA-Z0-9]{8}"
      time:
        type: "string"
        format: "date-time"
        description: "The date and time of the request as recorded by the sender.\
          \ The format shall be as defined for date-time in [RFC 3339 section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).\
          \ It is recommended that the optional time-secfrac be included up to millisecond\
          \ precision"
    description: "A MessageId object uniquely identifies a request. It is very important\
      \ that this field is constructed carefully, since a mistake here may lead to\
      \ hard to find duplicate messages that typically only show up in a busy production\
      \ environment"
  PaymentConfirmation:
    type: "object"
    required:
    - "messageId"
    - "tenders"
    properties:
      linkData:
        type: "object"
        description: "The unaltered linkData object as supplied in the createPayment\
          \ response. Required if the createPayment response contained linkData"
      messageId:
        $ref: "#/definitions/MessageId"
      tenders:
        type: "array"
        description: "An array of tenders used to pay for the transaction"
        items:
          $ref: "#/definitions/Tender"
        minItems: 1
    description: "Represents the data required to confirm a previously created payment"
  PaymentRequest:
    type: "object"
    required:
    - "accountRef"
    - "messageId"
    - "requestDetail"
    properties:
      accountRef:
        type: "string"
        description: "A reference number identifying the bill payments processor,\
          \ bill issuer, and customer"
        minLength: 6
        maxLength: 40
      messageId:
        $ref: "#/definitions/MessageId"
      merchant:
        $ref: "#/definitions/Merchant"
      requestDetail:
        $ref: "#/definitions/RequestDetail"
    description: "Represents a request to perform a payment"
  PaymentResponse:
    type: "object"
    required:
    - "account"
    - "id"
    - "receiver"
    - "responseDetail"
    - "slipData"
    properties:
      id:
        type: "string"
        description: "An identifier that uniquely identifies the payment"
        pattern: "[A-Za-z0-9._~-]{1,40}"
      account:
        $ref: "#/definitions/Account"
      customer:
        $ref: "#/definitions/Customer"
      linkData:
        type: "object"
        description: "This object may be used by the server to link a payment to a\
          \ payment confirmation or cancellation, and should be provided unaltered\
          \ by clients in corresponding requests"
      processor:
        $ref: "#/definitions/Institution"
      receiver:
        $ref: "#/definitions/Institution"
      responseDetail:
        $ref: "#/definitions/ResponseDetail"
      slipData:
        $ref: "#/definitions/SlipData"
    description: "Represents a response to a payment request"
  RefundConfirmation:
    type: "object"
    required:
    - "messageId"
    properties:
      linkData:
        type: "object"
        description: "The unaltered linkData object as supplied in the createRefund\
          \ response. Required if the createRefund response contained linkData"
      messageId:
        $ref: "#/definitions/MessageId"
    description: "Represents the data required to confirm a previously created refund"
  RefundRequest:
    type: "object"
    required:
    - "issuerReference"
    - "messageId"
    - "refundReason"
    properties:
      messageId:
        $ref: "#/definitions/MessageId"
      issuerReference:
        type: "string"
        description: "An identifier that is printed on the customer slip and uniquely\
          \ identifies the payment on the bill issuer's system. This value is used\
          \ by the customer to request a refund when the service supports this function,\
          \ and it is thus important that this number is unique"
        pattern: "[A-Z0-9]{1,20}"
      refundReason:
        type: "string"
        description: "The reason for the refund as given by the customer"
        minLength: 0
        maxLength: 20
    description: "Represents a request to refund a payment"
  RefundResponse:
    type: "object"
    required:
    - "account"
    - "id"
    - "receiver"
    properties:
      id:
        type: "string"
        description: "An identifier that uniquely identifies the payment"
        pattern: "[A-Za-z0-9._~-]{1,40}"
      account:
        $ref: "#/definitions/Account"
      customer:
        $ref: "#/definitions/Customer"
      linkData:
        type: "object"
        description: "This object may be used by the server to link a refund to a\
          \ refund confirmation or cancellation, and should be provided unaltered\
          \ by clients in corresponding requests"
      processor:
        $ref: "#/definitions/Institution"
      receiver:
        $ref: "#/definitions/Institution"
    description: "Represents a response to a refund request"
  RequestDetail:
    type: "object"
    required:
    - "requestAmount"
    properties:
      clientRef:
        type: "string"
        description: "A reference number useful to the client for identifying transactions,\
          \ also knows as a retrieval reference number"
        pattern: "[A-Za-z0-9 ]{0,12}"
      requestAmount:
        $ref: "#/definitions/LedgerAmount"
    description: "Request specific data"
  ResponseDetail:
    type: "object"
    required:
    - "responseAmount"
    properties:
      responseAmount:
        $ref: "#/definitions/LedgerAmount"
    description: "Response specific data"
  SlipData:
    type: "object"
    required:
    - "issuerReference"
    properties:
      messageLines:
        type: "array"
        description: "An array of free text lines to be printed on the customer slip"
        items:
          type: "string"
      phoneNumber:
        type: "string"
        description: "The call centre phone number"
      issuerReference:
        type: "string"
        description: "An identifier that is printed on the customer slip and uniquely\
          \ identifies the payment on the bill issuer's system. This value is used\
          \ by the customer to request a refund when the service supports this function,\
          \ and it is thus important that this number is unique"
        pattern: "[A-Z0-9]{1,20}"
    description: "Data that may be printed on the custoemr slip for information purposes"
  Tender:
    type: "object"
    required:
    - "amount"
    - "tenderType"
    properties:
      accountType:
        type: "string"
        description: "The type of account"
        enum:
        - "DEFAULT"
        - "SAVINGS"
        - "CHEQUE"
        - "CREDIT"
        - "UNIVERSAL"
        - "ELECTRONIC_PURSE"
        - "STORED_VALUE"
      amount:
        $ref: "#/definitions/LedgerAmount"
      cardNumber:
        type: "string"
        description: "A PCI compliant masked card number, with at least the first\
          \ 6 digits in the clear. Only applicable to card based transactions"
        pattern: "[0-9]{6}[0-9*]{0,13}"
      reference:
        type: "string"
        description: "A free text reference"
        minLength: 0
        maxLength: 40
      tenderType:
        type: "string"
        description: "The type of tender used"
        enum:
        - "CASH"
        - "CHECQUE"
        - "CREDIT_CARD"
        - "DEBIT_CARD"
        - "WALLET"
        - "ROUNDING"
        - "OTHER"
    description: "A tender used by a customer towards a payment"
