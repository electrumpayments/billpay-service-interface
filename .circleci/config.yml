version: 2
jobs:
  build-and-release:
    docker:
      - image: 813968012009.dkr.ecr.us-east-1.amazonaws.com/circleci-openjdk8-8u162
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - setup_remote_docker
      - checkout
      - restore_cache:
          # if you ever need to invalidate the cache, simply bump the version number
          keys:
            - v1-maven-{{ .Branch }}-{{ checksum "pom.xml" }}
            - v1-maven-{{ .Branch }}
      - run:
          name: Download dependencies
          command: mvn dependency:resolve-plugins dependency:go-offline -B -Dstyle.color=always
      - save_cache:
          paths:
            - ~/.m2/repository
          key: v1-maven-{{ .Branch }}-{{ checksum "pom.xml" }}
      - run:
          name: Validate release type
          command: /electrum/bin/validateReleaseType.sh
      - run:
          name: Compile, Test, and Release
          command: /electrum/bin/simpleTestAndReleaseJava.sh
      - run: cd /home/circleci/project/target/swagger && git clone git@github.com:electrumpayments/billpay-service-interface-website.git docs
      - run: cd /home/circleci/project/target/swagger && ls -l

      # Persist the specified paths into the workspace for use in downstream job. 
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is 
          # taken to be the root directory of the workspace.
          root: /home/circleci/project/target
          # Must be relative path from root
          paths:
            - swagger

      - run:
          name: Release failed! Revert any release steps that might have been taken
          command: /electrum/bin/revertReleaseJava.sh
          when: on_fail
      - run:
          name: Save test results
          command: |
            mkdir -p ~/tests/
            if [ -d target/surefire-reports ]; then mkdir -p ~/tests/surefire/; cp target/surefire-reports/*.xml ~/tests/surefire/; fi
            if [ -d target/failsafe-reports ]; then mkdir -p ~/tests/failsafe/; cp target/failsafe-reports/*.xml ~/tests/failsafe/; fi
          when: always
      - store_test_results:
          path: ~/tests
      - store_artifacts:
          path: ~/tests
          destination: tests
      - store_artifacts:
          path: logs
          destination: logs
      - store_artifacts:
          path: release
          destination: release
  code-coverage-report:
    docker:
      - image: 813968012009.dkr.ecr.us-east-1.amazonaws.com/circleci-openjdk8-8u162
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - restore_cache:
          # if you ever need to invalidate the cache, simply bump the version number
          keys:
            - v1-maven-{{ .Branch }}-{{ checksum "pom.xml" }}
            - v1-maven-{{ .Branch }}
      - run:
          name: Generate code coverage report
          command: mvn cobertura:cobertura -B -Dstyle.color=always
      - store_artifacts:
          path: target/site/cobertura
          destination: coverage
  build-with-latest-deps:
    docker:
      - image: 813968012009.dkr.ecr.us-east-1.amazonaws.com/circleci-openjdk8-8u162
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - setup_remote_docker
      - checkout
      - restore_cache:
          # if you ever need to invalidate the cache, simply bump the version number
          keys:
            - v1-maven-{{ .Branch }}-{{ checksum "pom.xml" }}
            - v1-maven-{{ .Branch }}
      - run:
          name: Update pom with latest Electrum deps
          command: /electrum/bin/updatePomWithLatestDeps.sh
      - run:
          name: Test, but only if any Electrum dependencies changed
          command: /electrum/bin/testWithUpdatedDepsJava.sh
      - run:
          name: Notify failure to slack
          command: /electrum/bin/notifySlackDepBuildFailed.sh
          when: on_fail
      - run:
          name: Save test results
          command: |
            mkdir -p ~/tests/
            if [ -d target/surefire-reports ]; then mkdir -p ~/tests/surefire/; cp target/surefire-reports/*.xml ~/tests/surefire/; fi
            if [ -d target/failsafe-reports ]; then mkdir -p ~/tests/failsafe/; cp target/failsafe-reports/*.xml ~/tests/failsafe/; fi
          when: always
      
      - store_test_results:
          path: ~/tests
      - store_artifacts:
          path: ~/tests
          destination: tests
      - store_artifacts:
          path: logs
          destination: logs
    
    
  build-website: 
    
    docker:
      - image: circleci/node:lts
    steps: # a collection of executable commands
      - run: # run tests
          name: Install Gatsby
          command: sudo npm install -g gatsby-cli
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /home/circleci/project
      - run: cp swagger/swagger.json swagger/docs/src/pages
      - run: cp swagger/swagger.yaml swagger/docs/src/pages
      - run: cd swagger/docs/src/pages && ls 
      - run: # modules
          name: Install Gatsby Modules
          command: cd swagger/docs && npm install --save-dev
      - run: cd swagger/docs && git init && git remote set-url origin git@github.com:electrumpayments/billpay-service-interface-website.git
      - run: cd swagger/docs && git config --global user.email "kialanpillay@gmail.com" && git config --global user.name "kialanpillay"
      - run: cd swagger/docs && sh src/createSwagger.sh
      - run: # build
          name: Run
          command: cd swagger/docs && NODE_ENV=production gatsby build && git add .
      - run: cd swagger/docs && git commit -m "Documentation"
      - run: cd swagger/docs && git push -u origin master
  
          


workflows:
  version: 2
  build:
    jobs:
      - build-and-release:
          context: java
      - code-coverage-report:
          context: java
      - build-website:
          context: java
          requires:
            - build-and-release
  nightly:
    jobs:
      - build-with-latest-deps:
          context: java
      - build-website:
          context: java
          requires:
            - build-with-latest-deps
    triggers:
      - schedule:
          # every night at 00:00 SAST (22:00 UTC)
          cron: "00 22 * * *"
          filters:
            branches:
              only:
                - master